#!/bin/bash

declare -A BOARD REVEALED IS_SHOWN
HEIGHT=16
WIDTH=16
BOMBNUM=40

X=2
Y=5

# little helpers for terminal print control and key input
ESC=$( printf "\033")
cursor_blink_on()  { printf "$ESC[?25h"; }
cursor_blink_off() { printf "$ESC[?25l"; }
cursor_to()        { printf "$ESC[$1;${2:-1}H"; }
print_option()     { printf "   $1 "; }
print_selected()   { printf "  $ESC[7m $1 $ESC[27m"; }

#COLORS
FBLACK="\033[30m"
FRED="\033[31m"
FGREEN="\033[32m"
FYELLOW="\033[33m"
FBLUE="\033[34m"
FPURPLE="\033[35m"
D_GREEN="\033[6m"
FWHITE="\033[7m"
FCYAN="\x1b[36m"
NONE="\033[0m"

function read_input {
    read -s -n3 KEY 2>/dev/null >&2
    POSITION_X=$(echo "${X}-1" | bc)
    POSITION_Y=$(echo "${Y}/4" | bc)
    if [[ $KEY = $ESC[D ]]; then Y=$(echo "${Y} - 4" | bc) ; fi
    if [[ $KEY = $ESC[C ]]; then Y=$(echo "${Y} + 4" | bc) ; fi
    if [[ $KEY = $ESC[A ]]; then X=$(echo "${X} - 1" | bc) ; fi
    if [[ $KEY = $ESC[B ]]; then X=$(echo "${X} + 1" | bc) ; fi
    if [[ $KEY = " " ]] ; then reveal_neighbors $POSITION_X $POSITION_Y; fi
    if [[ $KEY = "" ]] ; then reveal_neighbors $POSITION_X $POSITION_Y; fi

}
# This generates a random BOARD with specified size. BOARD is a matrix
# where 1 in position (i,j) means there is a bomb in (i,j); conversely,
# zeros represent positions without bombs.
# (1,1) is at the top left of the screen.
function make_board {
for ((i=1;i<=HEIGHT;i++)) do
    for ((j=1;j<=WIDTH;j++)) do
	BOARD[$i,$j]=0
	REVEALED[$i,$j]='-'
	IS_SHOWN[$i,$j]=0
    done
done

while [ ${BOMBNUM} -gt 0 ]
do
	X_POS=$(echo "${RANDOM}%${WIDTH} + 1" | bc)
	Y_POS=$(echo "${RANDOM}%${HEIGHT} + 1" | bc)
	if [[ BOARD[$X_POS,$Y_POS] -ne 1 ]]
	then
		BOARD[$X_POS,$Y_POS]=1
		BOMBNUM=$(echo "${BOMBNUM} - 1" | bc)
	fi

done
}

#function new_make_board {
#
#for ((i=1;i<=HEIGHT;i++)) do
    #for ((j=1;j<=WIDTH;j++)) do
	#BOARD[$i,$j]=0
	#REVEALED[$i,$j]='-'
    #done
#done
#
#while [ ${BOMBNUM} -gt 0 ]
#do
	#X_POS=$(echo "${RANDOM}%${WIDTH} + 1" | bc)
	#Y_POS=$(echo "${RANDOM}%${HEIGHT} + 1" | bc)
	#if [[ BOARD[$X_POS,$Y_POS] -ne -1 ]]
	#then
		#BOARD[$X_POS,$Y_POS]=-1
		#for i in `seq 1 3`
			 #echo
		#done
		#BOMBNUM=$(echo "${BOMBNUM} - 1" | bc)
	#fi
#
#done
#
#}

# Given a specific X,Y coordinate, this will either count the number
# of bombs in surrounding squares (returning a number) or return
# -1 in case the square itself contains a bomb.
function reveal_neighbors {
    X_POS="${2}"
    Y_POS="${1}"
    BOMBS_AROUND=0
    if [[ BOARD[$X_POS,$Y_POS] -eq 1 ]] # Returns -1 when a bomb is found
    then
	REVEALED[$X_POS,$Y_POS]='X'
	tput clear
	draw_board
	echo "Game over!"
	exit 0
    else
    # If there is no bomb on the spot, count how many bombs are around
	for((i=0;i<3;i++)){
	       for((j=0;j<3;j++)){
		      X_SEARCH=$(echo "${X_POS}-1+${i}" | bc)
		      Y_SEARCH=$(echo "${Y_POS}-1+${j}" | bc)
		      if [[ BOARD[$X_SEARCH,$Y_SEARCH] -eq 1 ]]
		      then
			  BOMBS_AROUND=$(echo "${BOMBS_AROUND} + 1" | bc )
		      fi

		  }
	   }
    fi

   REVEALED[$X_POS,$Y_POS]=$BOMBS_AROUND
   IS_SHOWN[$X_POS,$Y_POS]=1
   if [[ $BOMBS_AROUND -eq 0 ]]
   then
       echo "Found a zero!" >> log.txt
       for((i=0;i<3;i++)){
	      for((j=0;j<3;j++)){
		     X_SEARCH=$(echo "${X_POS}-1+${i}" | bc)
		     Y_SEARCH=$(echo "${Y_POS}-1+${j}" | bc)

		     echo "Looking for more on position: ${X_SEARCH} ${Y_SEARCH}" >> log.txt
		     echo "Tests: ${TEST1} ${TEST2} ${TEST3} ${TEST4} ${TEST5}" >> log.txt
			     if [[ $X_SEARCH -gt 0 ]] && [[ $X_SEARCH -le $WIDTH ]] && [[ $Y_SEARCH -gt 0 ]] && [[ $Y_SEARCH -le $HEIGHT ]] && [[ REVEALED[$X_SEARCH,$Y_SEARCH] -eq '-' ]] && [[ IS_SHOWN[$X_SEARCH,$Y_SEARCH] -ne 1 ]]
		     then
			 reveal_neighbors ${X_SEARCH} ${Y_SEARCH}
	             else
			 echo "Discarding position $X_SEARCH $Y_SEARCH for OUT OF BOUNDS" >> log.txt
		     fi
		 }
	  }
   fi
}

# This prints the contents of the REVEALED matrix. REVEALED is the
# size of BOARD and is initialized filled with X's. Whenever a
# location is given, the respective value of REVEALED is updated
# with the number of surrounding bombs and printed to the screen.
function draw_board {
for ((i=1;i<=HEIGHT;i++)) do
    printf "${FRED}${f2}${NONE}" $i
done
echo
for ((j=1;j<=WIDTH;j++)) do
    printf "${FRED}${f1}${NONE}" "$j"
    for ((i=1;i<=HEIGHT;i++)) do
        printf "$f2" ${REVEALED[$i,$j]}
    done
    echo
done
}


make_board
echo "${NUMBER}"
f1="%$((${#HEIGHT}))s"
#f1="%4s"
f2="%4s"



# Main execution loop
while [[ 1 -eq 1 ]]
do
    tput clear
    draw_board # Redraw board everytime a command is given
    cursor_to "${X}" "${Y}"
    read_input
    #read X Y
    #reveal_neighbors $X $Y # Matrix is actually transposed
done
