#!/bin/bash

declare -A BOARD REVEALED
HEIGHT=8
WIDTH=8
BOMBNUM=10
BOMBTOTAL=$BOMBNUM
BOMBHISCORE=$BOMBNUM

X=2
Y=6

# little helpers for terminal print control and key input
ESC=$( printf "\033")
cursor_blink_on()  { printf "$ESC[?25h"; }
cursor_blink_off() { printf "$ESC[?25l"; }
cursor_to()        { printf "$ESC[$1;${2:-1}H"; }
print_option()     { printf "   $1 "; }
print_selected()   { printf "  $ESC[7m $1 $ESC[27m"; }

#COLORS
FBLACK="\033[30m"
FRED="\033[31m"
FGREEN="\033[32m"
FYELLOW="\033[33m"
FBLUE="\033[34m"
FPURPLE="\033[35m"
D_GREEN="\033[6m"
FWHITE="\033[7m"
FCYAN="\x1b[36m"
NONE="\033[0m"

#OBJECTS
SPACE="   "
FLAG="${FRED}P${NONE}"
ONE="${FBLUE}1${NONE}"
TWO="${FGREEN}2${NONE}"
THREE="${FRED}3${NONE}"
FOUR="${FPURPLE}4${NONE}"
FIVE="${FCYAN}5${NONE}"
SIX="${FYELLOW}6${NONE}"
SEVEN="${FBLACK}7${NONE}"
EIGHT="${NONE}8${NONE}"

function help_dialog {
if [[ $1 -eq 1 ]]
then
	HELPROW=2
        OFFSET=$(echo "$HEIGHT*5" | bc )
	#tput clear
	tput cup "$HELPROW" "$OFFSET" 
	echo -ne "+============================+"
	HELPROW=$(echo "$HELPROW + 1" | bc)
	tput cup "$HELPROW" "$OFFSET"
	echo -ne "|            HELP            |"
	HELPROW=$(echo "$HELPROW + 1" | bc)
	tput cup "$HELPROW" "$OFFSET"
	echo -ne "|                            |"
	HELPROW=$(echo "$HELPROW + 1" | bc)
	tput cup "$HELPROW" "$OFFSET"
	echo -ne "|          MOVEMENT          |"
	HELPROW=$(echo "$HELPROW + 1" | bc)
	tput cup "$HELPROW" "$OFFSET"
	echo -ne "|             k              |"
	HELPROW=$(echo "$HELPROW + 1" | bc)
	tput cup "$HELPROW" "$OFFSET"
	echo -ne "|             UP             |"
	HELPROW=$(echo "$HELPROW + 1" | bc)
	tput cup "$HELPROW" "$OFFSET"
	echo -ne "|      h LEFT   RIGHT l      |"
	HELPROW=$(echo "$HELPROW + 1" | bc)
	tput cup "$HELPROW" "$OFFSET"
	echo -ne "|            DOWN            |"
	HELPROW=$(echo "$HELPROW + 1" | bc)
	tput cup "$HELPROW" "$OFFSET"
	echo -ne "|             j              |"
	HELPROW=$(echo "$HELPROW + 1" | bc)
	tput cup "$HELPROW" "$OFFSET"
	echo -ne "|                            |"
	HELPROW=$(echo "$HELPROW + 1" | bc)
	tput cup "$HELPROW" "$OFFSET"
	echo -ne "|   a-reveal square          |"
	HELPROW=$(echo "$HELPROW + 1" | bc)
	tput cup "$HELPROW" "$OFFSET"
	echo -ne "|   s-flag bombs             |"
	HELPROW=$(echo "$HELPROW + 1" | bc)
	tput cup "$HELPROW" "$OFFSET"
	echo -ne "|   q-quit game              |"
	HELPROW=$(echo "$HELPROW + 1" | bc)
	tput cup "$HELPROW" "$OFFSET"
	echo -ne "+============================+"
else
	echo
fi
}

function write_scores {
	 read -p "Congratulations! Please type in your name for the highscores: " WINNER_NAME
	 echo "${WINNER_NAME}:${1}:${2}:${BOMBHISCORE};" >> hiscores.txt
}

function read_input {
    read -s -n1 KEY 2>/dev/null >&2
    POSITION_X=$(echo "${X}-1" | bc)
    POSITION_Y=$(echo "${Y}/4" | bc)
    if [[ $KEY = 'h' ]]; then Y=$(echo "${Y} - 4" | bc) ; fi
    if [[ $KEY = 'l' ]]; then Y=$(echo "${Y} + 4" | bc) ; fi
    if [[ $KEY = 'k' ]]; then X=$(echo "${X} - 1" | bc) ; fi
    if [[ $KEY = 'j' ]]; then X=$(echo "${X} + 1" | bc) ; fi
    if [[ $KEY = 'a' ]] ; then reveal_neighbors $POSITION_X $POSITION_Y; fi
    if [[ $KEY = 's' ]] ; then mark_position $POSITION_X $POSITION_Y; fi
    if [[ $KEY = 'q' ]] ; then exit_prompt ; fi
}

function exit_prompt {
    tput clear
    read -p "Do you really want to exit? [y,N] " EXITCHOICE

    case "${EXITCHOICE}" in
	y | Y)
	    tput clear
	    exit 0
	    ;;
	n | N)
	    echo
	    ;;
	*)
	    echo
	    ;;
    esac

}

# This generates a random BOARD with specified size. BOARD is a matrix
# where 1 in position (i,j) means there is a bomb in (i,j); conversely,
# zeros represent positions without bombs.
# (1,1) is at the top left of the screen.
function make_board {

for ((i=1;i<=HEIGHT;i++)) do
    for ((j=1;j<=WIDTH;j++)) do
	BOARD[$i,$j]=0
	REVEALED[$i,$j]='-'
    done
done

while [ ${BOMBNUM} -gt 0 ]
do
    X_POS=$(echo "${RANDOM}%${WIDTH} + 1" | bc)
    Y_POS=$(echo "${RANDOM}%${HEIGHT} + 1" | bc)
    if [[ BOARD[$X_POS,$Y_POS] -ne 1 ]]
    then
	BOARD[$X_POS,$Y_POS]=1
	BOMBNUM=$(echo "${BOMBNUM} - 1" | bc)
    fi
done

}

function retry_dialog {
	read -p "Game over! Try again? [Y/n/q]" RETRY_STATE
    case $RETRY_STATE in
	"y" | "Y" | "" ) 
		BOMBNUM=$BOMBHISCORE
		BOMBTOTAL=$BOMBNUM
		make_board
		X=2
		Y=6
		game_loop
		;;
	"n" | "N" )
		main_menu
		;;
	"q" | "Q" )
	        tput clear
		exit 0
		;;
    esac
		

}

# Given a specific X,Y coordinate, this will either count the number
# of bombs in surrounding squares (returning a number) or return
# -1 in case the square itself contains a bomb.
function reveal_neighbors {
    X_POS="${2}"
    Y_POS="${1}"
    BOMBS_AROUND=0
    if [[ BOARD[$X_POS,$Y_POS] -eq 1 ]] # Returns -1 when a bomb is found
    then
	REVEALED[$X_POS,$Y_POS]='X'
	tput clear
	draw_board
	retry_dialog
    else
    # If there is no bomb on the spot, count how many bombs are around
	for((i=0;i<3;i++)){
	       for((j=0;j<3;j++)){
		      X_SEARCH=$(echo "${X_POS}-1+${i}" | bc)
		      Y_SEARCH=$(echo "${Y_POS}-1+${j}" | bc)
		      if [[ BOARD[$X_SEARCH,$Y_SEARCH] -eq 1 ]]
		      then
			  BOMBS_AROUND=$(echo "${BOMBS_AROUND} + 1" | bc )
		      fi

		  }
	   }
    fi

   case $BOMBS_AROUND in
   	1)
   		REVEALED[$X_POS,$Y_POS]="$ONE"
		;;
   	2)
   		REVEALED[$X_POS,$Y_POS]="$TWO"
		;;
   	3)
   		REVEALED[$X_POS,$Y_POS]="$THREE"
		;;
   	4)
   		REVEALED[$X_POS,$Y_POS]="$FOUR"
		;;
   	5)
   		REVEALED[$X_POS,$Y_POS]="$FIVE"
		;;
   	*)
   		REVEALED[$X_POS,$Y_POS]=$BOMBS_AROUND
		;;
  esac 

   if [[ $BOMBS_AROUND -eq 0 ]]
   then

   for((i=0;i<3;i++)){
      for((j=0;j<3;j++)){
	     X_SEARCH=$(echo "${X_POS}-1+${i}" | bc)
	     Y_SEARCH=$(echo "${Y_POS}-1+${j}" | bc)
    	     #if [[ $X_SEARCH -gt 0 ]] && [[ $X_SEARCH -le $WIDTH ]] && [[ $Y_SEARCH -gt 0 ]] && [[ $Y_SEARCH -le $HEIGHT ]] && [[ ${REVEALED[$X_SEARCH,$Y_SEARCH]} == '-' ]]
	     if [[ ${REVEALED[$X_SEARCH,$Y_SEARCH]} == '-' ]]
	     then
		 reveal_neighbors ${Y_SEARCH} ${X_SEARCH}
	     fi
	 }
  }
  fi 

  return 1

}

function test_win {

    if [[ $BOMBTOTAL -eq 0 ]]
    then
	tput clear
	END=$(date +%s.%N)
	DURATION=$(echo "${END} - ${START}" | bc -l )
	echo "You won!"
	write_scores "$DURATION" "${WIDTH}x${HEIGHT}"
	exit 0
    fi
}

function mark_position {
    X_TOMARK="${2}"
    Y_TOMARK="${1}"
    if [[ ${REVEALED[$X_TOMARK,$Y_TOMARK]} == '-' ]]
    then
	REVEALED[$X_TOMARK,$Y_TOMARK]="${FLAG}"
	if [[ ${BOARD[$X_TOMARK,$Y_TOMARK]} == 1 ]]
	   then
	       BOMBTOTAL=$(echo "${BOMBTOTAL} - 1 " | bc)
	   fi
    elif [[ ${REVEALED[$X_TOMARK,$Y_TOMARK]} == "${FLAG}" ]]
    then
	REVEALED[$X_TOMARK,$Y_TOMARK]="-"
	if [[ ${BOARD[$X_TOMARK,$Y_TOMARK]} == "1" ]] ; then
		BOMBTOTAL=$(echo "${BOMBTOTAL} + 1 " | bc)
	fi
    fi

}

# This prints the contents of the REVEALED matrix. REVEALED is the
# size of BOARD and is initialized filled with X's. Whenever a
# location is given, the respective value of REVEALED is updated
# with the number of surrounding bombs and printed to the screen.
function draw_board {
for ((i=1;i<=HEIGHT;i++)) do
    printf "${FRED}${f2}${NONE}" $i
done
echo
#for j in `seq -w 1 ${WIDTH}` ; do
for ((j=1;j<=WIDTH;j++)) do
    if [[ $j -lt 10 ]] ; then printf "${FRED}${f1}${NONE}" "0$j"
    else printf "${FRED}${f1}${NONE}" "$j" ; fi
    for ((i=1;i<=HEIGHT;i++)) do
        #printf "$f2" ${REVEALED[$i,$j]}
	echo -ne "${SPACE}${REVEALED[$i,$j]}"
    done
    echo
done
    #echo "Current BOMBTOTAL is: $BOMBTOTAL"
    echo

    help_dialog 1
}

function main_menu {
    tput clear
    tput cup 2 10
    tput setaf 1
    echo "Shell-sweeper"
    tput sgr0
    tput cup 3 8
    echo -e "$ONE $TWO $THREE $FOUR $FIVE $SIX $SEVEN $EIGHT $FLAG"

    tput cup 5 7
    echo "1 - Play game!"
    tput cup 6 7
    echo "2 - View highest scores!"
    tput cup 7 7
    echo "3 - Quit!"

    tput cup 9 7
    read -p "Enter your choice: " MENU_INPUT

    case $MENU_INPUT in
	"1") menu_choose_size ;;
	"2") hiscore_screen ;;
	"3") echo "Leaving! " ; exit 0 ;;
	*) main_menu ;;
    esac

}

function menu_choose_size {
    tput clear
    tput cup 3 5
    echo "Choose your difficulty!"

    tput cup 5 7
    echo "1 - Easy: 8x8, 10 bombs"
    tput cup 6 7
    echo "2 - Medium: 16x16, 40 bombs"
    tput cup 7 7
    echo "3 - Hard: 30x16, 99 bombs"

    tput cup 9 7
    read -p "Enter your choice: " MENU_INPUT

    case $MENU_INPUT in
	"1")
	    WIDTH=8
	    HEIGHT=8
	    BOMBNUM=10
	    BOMBTOTAL=$BOMBNUM
	    BOMBHISCORE=$BOMBNUM
	    ;;
	"2")
	    WIDTH=16
	    HEIGHT=16
	    BOMBNUM=40
	    BOMBTOTAL=$BOMBNUM
	    BOMBHISCORE=$BOMBNUM
	    ;;
	"3") 
	    WIDTH=30
	    HEIGHT=16
	    BOMBNUM=99
	    BOMBTOTAL=$BOMBNUM
	    BOMBHISCORE=$BOMBNUM
	    ;;
	*) main_menu ;;
    esac

}

function game_loop {
echo "${NUMBER}"
f1="%$((${#HEIGHT}))s"
#f1="%4s"
f2="%4s"



START=$(date +%s.%N) # For keeping scores
# Main execution loop
while [[ 1 -eq 1 ]]
do
    test_win
    tput clear
    draw_board # Redraw board everytime a command is given
    cursor_to "${X}" "${Y}"
    read_input
done
}


# ----------------------------------------------------------------
# MAIN RUNTIME BEGINS HERE
main_menu
make_board
game_loop 

